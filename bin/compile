#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env_dir>

# fail fast
set -e

#retrieve new relic env variables
env_dir=$3
echo "## env variable dir $env_dir"
whitelist_regex=${2:-'^(NEW_RELIC_LICENSE_KEY|GIT_DIR|NEW_RELIC_APP_NAME)$'}
blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
        echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
        export "$e=$(cat $env_dir/$e)"        
        :
    done
fi

# config
APACHE_VERSION="2.2.22"
APACHE_PATH="apache"
PHP_VERSION="5.4.13"
PHP_PATH="php"

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

APACHE_URL="https://mediabunker.com/downloads/heroku/buildpack-php/apache.tar.gz"
echo "-----> Bundling Apache version $APACHE_VERSION"
curl --silent --max-time 60 --location "$APACHE_URL" | tar xz

PHP_URL="https://mediabunker.com/downloads/heroku/buildpack-php/php.tar.gz"
echo "-----> Bundling PHP version $PHP_VERSION"
curl --silent --max-time 60 --location "$PHP_URL" | tar xz

if ! [ -n "$NEW_RELIC_LICENSE_KEY" ]; then
    NEW_RELIC_URL="https://mediabunker.com/downloads/heroku/buildpack-php/newrelic.tar.gz"
    echo "-----> Found new relic license key, installing newrelic."
    curl --silent --max-time 60 --location "$NEW_RELIC_URL" | tar xz
    
    echo "-----> Setting new relic license key and app name ($NEW_RELIC_APP_NAME)"
    sed -i "s|REPLACE_WITH_REAL_KEY|${NEW_RELIC_LICENSE_KEY}|g" $LP_DIR/conf/php.ini
    sed -i "s|REPLACE_WITH_REAL_APP_NAME|${NEW_RELIC_APP_NAME}|g" $LP_DIR/conf/php.ini
    
    mkdir newrelic/logs/
    touch newrelic/logs/agent.log
    touch newrelic/logs/daemon.log
else
    echo "-----> No new relic license key found. Set NEW_RELIC_LICENSE_KEY to use new relic!"
fi

# update config files
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf
cp $LP_DIR/conf/php.ini php

# make php available on bin
mkdir -p bin
ln -s /app/php/bin/php bin/php

cat >>boot.sh <<EOF
#!/usr/bin/env bash

for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
done

# set new relic license key, add \ before $ when issue with env variables is fixed
#if [ "${NEW_RELIC_LICENSE_KEY}" ]; then
#sed -i "s|REPLACE_WITH_REAL_KEY|${NEW_RELIC_LICENSE_KEY}|g" /app/php/php.ini
#fi

touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
tail -F /app/newrelic/logs/agent.log &
tail -F /app/newrelic/logs/daemon.log &
export LD_LIBRARY_PATH=/app/php/ext
export PHP_INI_SCAN_DIR=/app/www
echo "Launching apache"
exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

# clean the cache
rm -rf $CACHE_DIR
